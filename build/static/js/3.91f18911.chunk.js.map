{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","pages/AllQuotes.js"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","QuoteItem","props","item","text","author","id","QuoteList","navigate","useNavigate","location","useLocation","console","log","queryParams","URLSearchParams","search","get","quotes","ascending","isSortingAscending","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","pathname","replace","list","map","quote","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"mIAAA,mCAceA,IAXO,WACpB,OACE,sBAAKC,UAAWC,IAAQC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMC,GAAG,aAAaH,UAAU,MAAhC,2BAKL,C,qBCXDI,EAAOC,QAAU,CAAC,SAAW,gC,qBCA7BD,EAAOC,QAAU,CAAC,KAAO,wB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2B,oICkB5CC,EAhBG,SAACC,GACjB,OACE,qBAAIP,UAAWC,IAAQO,KAAvB,UACE,mCACE,qCACE,4BAAID,EAAME,SAEZ,qCAAaF,EAAMG,YAErB,cAAC,IAAD,CAAMP,GAAE,kBAAaI,EAAMI,IAAMX,UAAU,MAA3C,2BAKL,E,iBCgDcY,EAjDG,SAACL,GACjB,IAAMM,EAAWC,cACXC,EAAWC,cAEjBC,QAAQC,IAAIH,GAEZ,IAAMI,EAAc,IAAIC,gBAAgBL,EAASM,QACjDJ,QAAQC,IAAIC,EAAYG,IAAI,SAC5BL,QAAQC,IAAIC,EAAYG,IAAI,UAE5B,IApBkBC,EAAQC,EAoBpBC,EAAiD,QAA5BN,EAAYG,IAAI,QAErCI,GAtBYH,EAsBchB,EAAMgB,OAtBZC,EAsBoBC,EArBvCF,EAAOI,MAAK,SAACC,EAAQC,GAC1B,OAAIL,EACKI,EAAOjB,GAAKkB,EAAOlB,GAAK,GAAK,EAE7BiB,EAAOjB,GAAKkB,EAAOlB,GAAK,GAAK,CAEvC,KA+BD,OACE,eAAC,WAAD,WACE,qBAAKX,UAAWC,IAAQ6B,QAAxB,SACE,yBAAQC,QAjBe,WAC3BlB,EACE,CACEV,GAAIY,EAASiB,SACbC,SAAS,EACTZ,OAAO,SAAD,OAAWI,EAAqB,OAAS,MAAzC,iBAOX,EAKK,kBACQA,EAAqB,aAAe,iBAG9C,oBAAIzB,UAAWC,IAAQiC,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEzB,GAAIyB,EAAMzB,GACVD,OAAQ0B,EAAM1B,OACdD,KAAM2B,EAAM3B,MAHP2B,EAAMzB,GAFG,QAWzB,E,gCC3CY0B,EAAY,SAAC9B,GACxB,MAKI+B,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAOF,OAJAC,qBAAU,WACRL,GACD,GAAE,CAACA,IAEW,YAAXC,EAEA,qBAAKzC,UAAU,WAAf,SACE,cAAC8C,EAAA,EAAD,MAKFF,EACK,mBAAG5C,UAAU,mBAAb,SAAiC4C,IAG3B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,OAItD,cAAC,EAAD,CAAWxB,OAAQmB,IAHjB,cAAC3C,EAAA,EAAD,GAIV,C","file":"static/js/3.91f18911.chunk.js","sourcesContent":["import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to=\"/new-quote\" className=\"btn\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__1SGQD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2460Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__IOhiE\",\"sorting\":\"QuoteList_sorting__1a24h\"};","import { Link } from \"react-router-dom\";\nimport classes from \"./QuoteItem.module.css\";\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className=\"btn\">\n        View Detail\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  console.log(location);\n\n  const queryParams = new URLSearchParams(location.search);\n  console.log(queryParams.get(\"sort\"));\n  console.log(queryParams.get(\"hello\"));\n\n  const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    navigate(\n      {\n        to: location.pathname,\n        replace: true,\n        search: `?sort=${isSortingAscending ? \"desc\" : \"asc\"}&hello=world`,\n      }\n      // OR\n      // `${location.pathname}?sort=${\n      //   isSortingAscending ? \"desc\" : \"asc\"\n      // }&hello=world`\n    );\n  };\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { useEffect } from \"react\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";\r\n\r\n// const DUMMY_QUOTES = [\r\n//   {\r\n//     id: \"q1\",\r\n//     author: \"Max\",\r\n//     text: \"Learning React is fun!\",\r\n//   },\r\n//   {\r\n//     id: \"q2\",\r\n//     author: \"Nut\",\r\n//     text: \"Learning React is GREAT!\",\r\n//   },\r\n// ];\r\n\r\nexport const AllQuotes = (props) => {\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuotes,\r\n    error,\r\n  } = useHttp(getAllQuotes, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest();\r\n  }, [sendRequest]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (status === \"completed\" && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n    return <NoQuotesFound />;\r\n  }\r\n\r\n  return <QuoteList quotes={loadedQuotes} />;\r\n};\r\n"],"sourceRoot":""}