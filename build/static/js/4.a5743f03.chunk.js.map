{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/quotes/HighlightedQuote.module.css","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","HighlightedQuote","props","quote","text","author","QuoteDetail","quoteId","useParams","useHttp","getSingleQuote","sendRequest","status","loadedQuote","data","error","useEffect","content","LoadingSpinner"],"mappings":"mIAAA,mCAceA,IAXO,WACpB,OACE,sBAAKC,UAAWC,IAAQC,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMC,GAAG,aAAaH,UAAU,MAAhC,2BAKL,C,qBCXDI,EAAOC,QAAU,CAAC,SAAW,gC,qBCA7BD,EAAOC,QAAU,CAAC,MAAQ,gC,wHCUXC,EATU,SAACC,GACxB,OACE,yBAAQP,UAAWC,IAAQO,MAA3B,UACE,4BAAID,EAAME,OACV,qCAAaF,EAAMG,WAGxB,E,uCCeYC,EAAc,SAACJ,GAC1B,IAGQK,EAHOC,cAGPD,QACR,EAKIE,YAAQC,KAJVC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAGFC,qBAAU,WACRL,EAAYJ,EACb,GAAE,CAACI,EAAaJ,IAMjB,IAAIU,EAAU,cAACvB,EAAA,EAAD,IAEd,MAAe,YAAXkB,EAEA,qBAAKjB,UAAU,WAAf,SACE,cAACuB,EAAA,EAAD,MAKFH,EACK,mBAAGpB,UAAU,WAAb,SAAyBoB,KAG5BF,IACJI,EACE,qCACE,cAAC,EAAD,CAAkBb,KAAMS,EAAYT,KAAMC,OAAQQ,EAAYR,SAI9D,cAAC,IAAD,QAqBCY,EACR,C","file":"static/js/4.a5743f03.chunk.js","sourcesContent":["import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to=\"/new-quote\" className=\"btn\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__1SGQD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1m4n5\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Outlet } from \"react-router-dom\";\r\n\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\n\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport { useEffect } from \"react\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\n////suppose to be a data that from fetching from API\r\n// const DUMMY_QUOTES = [\r\n//   {\r\n//     id: \"q1\",\r\n//     author: \"Max\",\r\n//     text: \"Learning React is fun!\",\r\n//   },\r\n//   {\r\n//     id: \"q2\",\r\n//     author: \"Nut\",\r\n//     text: \"Learning React is GREAT!\",\r\n//   },\r\n// ];\r\n\r\nexport const QuoteDetail = (props) => {\r\n  const params = useParams();\r\n  //const routeMatch = useRouteMatch();\r\n\r\n  const { quoteId } = params;\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  // console.log(routeMatch);\r\n\r\n  // const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\r\n\r\n  let content = <NoQuotesFound />;\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!!loadedQuote) {\r\n    content = (\r\n      <>\r\n        <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n        {/* <Route path={`/quotes/${params.quoteId}`} exact>\r\n            OR\r\n        */}\r\n        <Outlet />\r\n        {/* <Route path={`${routeMatch.path}`} exact>\r\n          <div className=\"centered\">\r\n            <Link to={`${routeMatch.url}/comments`} className=\"btn\">\r\n              Comment\r\n            </Link>\r\n            <button className=\"btn\" onClick={() => history.goBack()}>\r\n              Back\r\n            </button>\r\n          </div>\r\n        </Route>\r\n        <Route path={`${routeMatch.path}/comments`}> */}\r\n        {/* OR\r\n        if Route not Link\r\n         <Route path=\"/quotes/:quoteId/comments\">\r\n          <Comments />\r\n        </Route>*/}\r\n      </>\r\n    );\r\n  }\r\n\r\n  return content;\r\n};\r\n"],"sourceRoot":""}